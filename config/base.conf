application {
	
	name = "bcp-shcl-person-batch"
	
	encrypted-keys = [
	   "application.credentials.cassandra-username",
	   "application.credentials.cassandra-password",
	   "application.credentials.cassandra-trustore-password",
	   "application.credentials.cassandra-keystore-password"
	]
	
	entity-mapping {
	   natural-person = "config/entity/entity_natural_person.json"
	   legal-person = "config/entity/entity_legal_person.json"
	   person-by-cic = "config/entity/entity_person_by_cic.json"
	   person-by-idc = "config/entity/entity_person_by_idc.json"
	}

	mapping {
		"natural_person_batch" : "config/mapping/mapping_natural_person_batch_Batch.json" 
	    "legal_person_batch" : "config/mapping/mapping_legal_person_batch_Batch.json" 
		"natural_person_delta_batch" : "config/mapping/mapping_delta_natural_person_batch_Batch.json" 
	    "legal_person_delta_batch" : "config/mapping/mapping_delta_legal_person_batch_Batch.json" 	 
	}	

	required-fields {
	
		 natural-person = [
			"last_name",
			"mother_last_name",
			"name",
			"client_type_indicator",
			"customer_type",
			"executive_registration",
			"office_code",
			"sbs_code",
			"banking_segment",
			"gender",
			"civil_status",
			"account_use",
			"birthdate",
			"contract_signature_date",
			"ruc",
			"person_id",
			"correlative_indicator",
			"document_number",
			"document_type",
			"constitution_date",
			"expiration_date",
			"record",
			"frame",
			"len_doc_num",
			"len_ruc",
			"crypto_fields"
		]
	
	    legal-person = [
			"client_type_indicator",
			"customer_type",
			"executive_registration",
			"office_code",
			"sbs_code",
			"banking_segment",
			"money_laundering_indicator",
			"business_name",
			"banking_type_indicator",
			"economic_activity",
			"classification_type_credit",
			"type_society",
			"date_company_constitution",
			"taxpayer_status",
			"document_type",
			"ruc",
			"person_id",
			"correlative_indicator",
			"document_number",
			"document_type",
			"constitution_date",
			"expiration_date",
			"record",
			"frame",
			"len_doc_num",
			"len_ruc",
			"crypto_fields"
		]
	}

	persistence-tables {

	    natural-person {	          
			keyspace = "alexandria"
			table = "natural_person"
			not-null-fields = ""
			fields = []
	    }
	    
	    legal-person {
	        keyspace = "alexandria"
			table = "legal_person"
			not-null-fields = ""
			fields = []
	    }
	    
	    person-by-cic {
	        keyspace = "alexandria"
			table = "person_by_cic"
			not-null-fields = ""
			fields = []
	    }
	    
	    person-by-idc {
	        keyspace = "alexandria"
			table = "person_by_idc"
			not-null-fields = ""
			fields = []
	    }    
	
	}

	persistence-tables-errors {
		keyspace = "alexandria"
		table = "error_log"
		not-null-fields = ""
		fields = []
	}
	
	
	cassandra {
	    transactional_consistency_level = "LOCAL_QUORUM"
	    clustering = [
			"num",
			"code"			
		]		
	}
	
	spark {
		master="dse://?"
		conf {
			"spark.ui.port": 4041,
			"spark.serializer": "org.apache.spark.serializer.KryoSerializer",
			"spark.io.compression.codec": "org.apache.spark.io.SnappyCompressionCodec",
			"spark.rdd.compress": true,

			"spark.cassandra.connection.host": ${application.hosts.cassandra},
			"spark.cassandra.connection.port": 9042,
			"spark.cassandra.output.ignoreNulls":true,
            "spark.cassandra.connection.compression":"SNAPPY",
			"spark.cassandra.auth.username": ${application.credentials.cassandra-username},
            "spark.cassandra.auth.password": ${application.credentials.cassandra-password},
            "spark.cassandra.connection.ssl.enabled":${application.credentials.ssl-enabled},
			"spark.cassandra.connection.ssl.keyStore.password":${application.credentials.cassandra-keystore-password},
			"spark.cassandra.connection.ssl.keyStore.path":${application.credentials.cassandra-keystore-path},
			"spark.cassandra.connection.ssl.trustStore.password":${application.credentials.cassandra-trustore-password},
			"spark.cassandra.connection.ssl.trustStore.path":${application.credentials.cassandra-trustore-path},
	        "spark.cassandra.input.split.size_in_mb": "128",
			"spark.cassandra.input.fetch.size_in_rows": "15000",

			"spark.cores.max": ${application.tunning.cores-max},
			"spark.executor.memory": ${application.tunning.executor-memory},
			"spark.executor.cores": ${application.tunning.executor-cores},

			"spark.io.compression.snappy.blockSize": "512k",
			"spark.rpc.io.serverThreads":"16",
			
			"spark.ui.retainedJobs": 10,
			"spark.ui.retainedStages": 100,
			"spark.ui.retainedTasks": 100,
			"spark.worker.ui.retainedExecutors": 10,
			"spark.worker.ui.retainedDrivers": 1,
			"spark.sql.ui.retainedExecutions": 10,
			
			"spark.hadoop.fs.azure": "org.apache.hadoop.fs.azure.NativeAzureFileSystem",
		    "spark.hadoop.fs.wasb.impl":"org.apache.hadoop.fs.azure.NativeAzureFileSystem",
		    "spark.hadoop.fs.AbstractFileSystem.wasb.impl":"org.apache.hadoop.fs.azure.Wasb"
		}
	}
}

#include "./enrichment-natural-person.conf"
#include "./enrichment-legal-person.conf"